name: Create IAM User and Policy

on:
  push:
    branches:
      - master

jobs:
  create-iam-user-and-policy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set Environment Variables
      run: |
        echo "USER_NAME=My-user2" >> $GITHUB_ENV
        echo "POLICY_NAME=Mypolicy" >> $GITHUB_ENV

    - name: Delete Existing IAM User and Policy (if exists)
      run: |
        set -e
        USER_NAME=${{ env.USER_NAME }}
        POLICY_NAME=${{ env.POLICY_NAME }}

        # Check if user exists and delete if necessary
        if aws iam get-user --user-name $USER_NAME 2>/dev/null; then
          echo "User $USER_NAME exists, deleting..."
          POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='$POLICY_NAME'].Arn" --output text)
          if [ -n "$POLICY_ARN" != "None" ]; then
            aws iam detach-user-policy --user-name $USER_NAME --policy-arn $POLICY_ARN
          fi
          aws iam delete-user --user-name $USER_NAME
        else
          echo "User $USER_NAME does not exist"
        fi

        # Check if policy exists and delete if necessary
        POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='$POLICY_NAME'].Arn" --output text)
        if [ -n "$POLICY_ARN" != "None" ]; then
          aws iam delete-policy --policy-arn $POLICY_ARN
        fi

    - name: Create IAM User
      run: |
        USER_NAME=${{ env.USER_NAME }}
        aws iam create-user --user-name $USER_NAME

    - name: Create IAM Policy
      run: |
        POLICY_NAME=${{ env.POLICY_NAME }}
        cat <<EoF > access-policy.json
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetObject",
                "s3:PutObject"
              ],
              "Resource": "*"
            }
          ]
        }
        EoF
        aws iam create-policy --policy-name $POLICY_NAME --policy-document file://access-policy.json

    - name: Attach IAM Policy to User
      run: |
        USER_NAME=${{ env.USER_NAME }}
        POLICY_NAME=${{ env.POLICY_NAME }}
        POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='$POLICY_NAME'].Arn" --output text)
        if [ -n "$POLICY_ARN" != "None" ]; then
          aws iam attach-user-policy --user-name $UserName --policy-arn $POLICY_ARN
        else
          echo "policy $POLICY_NAME does not exist"






# name: Delete IAM User and Associated Resources

# on:
#   push:
#     branches:
#       - master

# jobs:
#   delete-iam-user-and-resources:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v2
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-east-1

#     - name: Check if IAM User Exists
#       id: check-user
#       run: |
#         USER_NAME=My-user2
#         if aws iam get-user --user-name $USER_NAME 2>/dev/null; then
#           echo "::set-output name=user_exists::true"
#         else
#           echo "::set-output name=user_exists::false"
#         fi

#     - name: Detach Policies and Delete IAM User
#       if: steps.check-user.outputs.user_exists == 'true'
#       run: |
#         USER_NAME=My-user2
#         POLICIES=$(aws iam list-attached-user-policies --user-name $USER_NAME --query 'AttachedPolicies[].PolicyArn' --output text)
#         for POLICY_ARN in $POLICIES; do
#           aws iam detach-user-policy --user-name $USER_NAME --policy-arn $POLICY_ARN
#         done
#         aws iam delete-user --user-name $USER_NAME

      # Optionally handle case where user doesn't exist
      



